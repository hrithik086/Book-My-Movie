package com.user.management.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.user.management.exceptions.UserCreationException;
import com.user.management.model.User;
import com.user.management.repository.UserRepo;

@Service
public class UserServiceImpl implements UserService{
	
	@Autowired
	UserRepo userRepo;
	
	@Autowired
	private PasswordEncoder passwordEncoder;

	@Override
	public List<User> getAllUsers() {
		// TODO Auto-generated method stub
		List<User> userList= userRepo.findAll();
		return userList;
	}

	@Override
	public boolean createUser(User user) throws UserCreationException {
		Optional<User> myUser=userRepo.findById(user.getId());
		if(myUser.isEmpty()) {
			String hashedPassword=passwordEncoder.encode(user.getPassword());
			user.setPassword(hashedPassword);
			userRepo.save(user);
			return true;
		}
		
		throw new UserCreationException("unable to create user a user with same user id exist in the database");
		
	}

	@Override
	public boolean login(String username, String password) {
//		List<User> userLists=userRepo.findByUsernameAndPassword(username, password);
		List<User> userLists=userRepo.searchUsingUsernameAndPassword(username, password);

		if(userLists.size()!=0) {
			return true;
		}
		return false;
	}
	
	@Override
	public String getUserRole(String username, String password) {
//		List<User> userLists=userRepo.findByUsernameAndPassword(username, password);
		List<User> userLists=userRepo.searchUsingUsernameAndPassword(username, password);
		return userLists.get(0).getRole();
	}

	@Override
	public boolean getUserByUsername(String username) {
		List<User> users=userRepo.findByUsername(username);
		
		if(users.size()!=0) {
			return true;
		}
		
		return false;
	}

	@Override
	public boolean isUseridAndUseernameSame(int userId, String username) {
		Optional<User> userOptional=userRepo.findById(userId);
		
		if(userOptional.isPresent()) {
			User user=userOptional.get();
			if(user.getUsername().equals(username)) {
				return true;
			}
			else {
				return false;
			}
		}
		
		return false;
	}

	@Override
	public boolean changePassword(int userId, String password) {
		Optional<User> userOptional=userRepo.findById(userId);
		
		if(userOptional.isPresent()) {
			User user=userOptional.get();
			user.setPassword(password);
			userRepo.save(user);
			return true;
		}
		
		return false;
	}
	
	
	
	
	
	
	
	
}
